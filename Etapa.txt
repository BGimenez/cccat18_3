UC5 - AcceptRide
Ator: Motorista
Input: ride_id, driver_id (account_id)
Output: void

Regras:

	•	deve verificar se o account_id tem is_driver true - OK
	•	deve verificar se o status da corrida é "requested", se não for, lançar um erro - OK
	•	deve verificar se o motorista já tem outra corrida com status "accepted" ou "in_progress", se tiver lançar um erro - OK
	•	deve associar o driver_id na corrida - OK
	•	deve mudar o status para "accepted" - OK

UC6 - StartRide
Ator: Motorista
Input: ride_id
Output: void

Regras:

	•	Deve verificar se a corrida está em status "accepted", se não estiver lançar um erro - OK
	•	Deve modificar o status da corrida para "in_progress" - OK

UC7 - UpdatePosition
Ator: Sistema
Input: ride_id, lat, long
Output: void

	•	Deve verificar se a corrida está em status "in_progress", se não estiver lançar um erro - OK
	•	Deve gerar o position_id - OK
	•	Deve salvar na tabela position: position_id, ride_id, lat, long e date - OK

Considere o modelo de dados:

create table ccca.position (
position_id uuid,
ride_id uuid,
lat numeric,
long numeric,
date timestamp
);

